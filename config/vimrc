" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
" How to use this plug manager ?
" Run the command in vim command mode
" After you add a new plug, you should exit this file and reload this file 
" :PlugInstall
" :PlugUpdate
" :PlugStatus
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
"Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
Plug 'https://github.com/majutsushi/tagbar.git'
Plug 'https://github.com/vim-scripts/winmanager--Fox'
Plug 'https://github.com/WolfgangMehner/c-support.git'
Plug 'https://github.com/WolfgangMehner/bash-support.git'
Plug 'https://github.com/fholgado/minibufexpl.vim.git'
Plug 'https://github.com/hari-rangarajan/CCTree.git'
Plug 'https://github.com/tpope/vim-fugitive' 
Plug 'https://github.com/airblade/vim-gitgutter' 
Plug 'https://github.com/mileszs/ack.vim' 
Plug 'https://github.com/vim-airline/vim-airline' 
Plug 'https://github.com/vim-airline/vim-airline-themes' 
Plug 'https://github.com/terryma/vim-expand-region' 
Plug 'https://github.com/Valloric/YouCompleteMe'
Plug 'https://github.com/tenfyzhong/CompleteParameter.vim.git'
Plug 'fatih/vim-go', { 'tag': 'v1.21' }
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }

" Initialize plugin system
call plug#end()
set expandtab
set tabstop=4
set shiftwidth=4
set backspace=indent,eol,start "only for macos
syntax on
filetype plugin on
filetype on
set hlsearch
set number
set noswapfile
set term=xterm-256color
set t_Co=256
set background=dark 
"colorscheme solarized
colorscheme desert
"colorscheme  evening
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8
set showmatch "highlight matching braces
set mouse=a "enable mouse
"=============tagbar=====================
let g:tagbar_left = 1
"autocmd VimEnter * nested :call tagbar#autoopen(1)
nmap <F8> :TagbarToggle<CR>
"=============cscope==========================
function! LoadCscope()
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  " else add the database pointed to by environment variable
  elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
  endif
endfunction
au BufEnter /* call LoadCscope()


"nmap <C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
"nmap <C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"nmap <C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
"================PowerLine===================================
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%y/%m/%d\ -\ %H:%M\")}
set laststatus=2
"=============WinManager======================================"
let g:winManagerWindowLayout='FileExplorer|TagList'
nmap wm :WMToggle<CR>

"===========minibufexp===============================
""let g:miniBufExplBuffersNeeded = 1

"============indentLine=================================
""let g:indentLine_enabled = 1
""let g:indentLine_color_term = 239
"============file type=================================
augroup LANGUAGE
	autocmd FileType c,cpp source ~/.vim/ftplugin/c.vim
	autocmd FileType python source ~/.vim/ftplugin/python.vim
	autocmd FileType go source ~/.vim/ftplugin/go.vim
	autocmd FileType java source ~/.vim/ftplugin/java.vim
	autocmd FileType js source ~/.vim/ftplugin/js.vim
augroup end

"=============airline================================
"let g:airline#extensions#tabline#enabled=1
let g:airline_theme='deus'
let g:airline#extensions#tabline#formatter='unique_tail'
"============自动补全括号==========================="
"imap ( ()<ESC>i
"imap [ []<ESC>i
"imap { {<CR>}<ESC>O

"=====设置剪切板======================================
"Leader is "\" in keyboard, the following two keymap is just copy/paste to system clipboard
nmap <Leader>y "*yy    
nmap <Leader>p "*p
"===============folder method=========================
set foldmethod=indent
set foldlevelstart=99
"===============vim expand region====================
"Press + to expand the visual selection and _ to shrink it

"===============rainbow setting===================
"let g:rainbow_active = 1

"=============YCM==================
set completeopt=menu,menuone
let g:ycm_add_preview_to_completeopt = 0

"============CompleteParameter==================
inoremap <silent><expr> ( complete_parameter#pre_complete("()")
smap <c-j> <Plug>(complete_parameter#goto_next_parameter)
imap <c-j> <Plug>(complete_parameter#goto_next_parameter)
smap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
