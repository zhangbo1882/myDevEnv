" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
" How to use this plug manager ?
" Run the command in vim command mode
" After you add a new plug, you should exit this file and reload this file 
" :PlugInstall
" :PlugUpdate
" :PlugStatus
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
"Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
Plug 'https://github.com/majutsushi/tagbar.git'
Plug 'https://github.com/vim-scripts/winmanager--Fox'
Plug 'https://github.com/WolfgangMehner/c-support.git'
Plug 'https://github.com/WolfgangMehner/bash-support.git'
Plug 'https://github.com/Lokaltog/vim-powerline.git'
Plug 'https://github.com/fholgado/minibufexpl.vim.git'
"Plug 'https://github.com/kien/ctrlp.vim.git'
Plug 'https://github.com/hari-rangarajan/CCTree.git'
"Plug 'https://github.com/vim-scripts/taglist.vim.git'
"Plug 'https://github.com/ludovicchabant/vim-gutentags.git'
" Multiple Plug commands can be written in a single line using | separators
"Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'https://github.com/davidhalter/jedi-vim.git'
Plug 'https://github.com/vim-syntastic/syntastic.git'

" On-demand loading
"Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
"Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-master branch
"Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }

" Plugin outside ~/.vim/plugged with post-update hook
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Unmanaged plugin (manually installed and updated)
"Plug '~/my-prototype-plugin'

" Initialize plugin system
call plug#end()

set backspace=indent,eol,start "only for macos
syntax on
filetype plugin on
filetype on
set hlsearch
set number
set noswapfile
set term=xterm-256color
set t_Co=256
set background=dark 
"colorscheme solarized
colorscheme desert
"colorscheme  evening
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8
set showmatch "highlight matching braces

"=============tagbar=====================
let g:tagbar_left = 1
"autocmd VimEnter * nested :call tagbar#autoopen(1)
nmap <F8> :TagbarToggle<CR>
"=============cscope==========================
function! LoadCscope()
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  " else add the database pointed to by environment variable
  elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
  endif
endfunction
au BufEnter /* call LoadCscope()


"nmap <C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
"nmap <C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"nmap <C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>
"================PowerLine===================================
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%y/%m/%d\ -\ %H:%M\")}
set laststatus=2
"=============WinManager======================================"
let g:winManagerWindowLayout='FileExplorer|TagList'
nmap wm :WMToggle<CR>:

"===========minibufexp===============================
let g:miniBufExplBuffersNeeded = 1

"=========CtrlP======================================
"let g:ctrlp_map = '<leader>p' "<leader> means '\'
"let g:ctrlp_cmd = 'CtrlP'
"map <leader>f :CtrlPMRU<CR>
"let g:ctrlp_custom_ignore = {
"    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
"    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc|o|d|ppt|sig)$',
"    \ }
"let g:ctrlp_working_path_mode='rw'
"let g:ctrlp_by_filename=1
"let g:ctrlp_match_window_bottom=1
"let g:ctrlp_follow_symlinks=1

"============file type=================================
augroup LANGUAGE
	autocmd FileType c,cpp source ~/.vim/ftplugin/c.vim
	autocmd FileType python source ~/.vim/ftplugin/python.vim
	autocmd FileType go source ~/.vim/ftplugin/go.vim
	autocmd FileType java source ~/.vim/ftplugin/java.vim
	autocmd FileType js source ~/.vim/ftplugin/js.vim
augroup end

